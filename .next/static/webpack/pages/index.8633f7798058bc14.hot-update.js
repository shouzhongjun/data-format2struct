"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "(pages-dir-browser)/./pages/utils.ts":
/*!************************!*\
  !*** ./pages/utils.ts ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SQL_TEMPLATE: () => (/* binding */ SQL_TEMPLATE),\n/* harmony export */   TEMPLATES: () => (/* binding */ TEMPLATES),\n/* harmony export */   convertToGo: () => (/* binding */ convertToGo),\n/* harmony export */   formatJSON: () => (/* binding */ formatJSON),\n/* harmony export */   formatYAML: () => (/* binding */ formatYAML),\n/* harmony export */   jsonToGo: () => (/* binding */ jsonToGo),\n/* harmony export */   sqlToGoStruct: () => (/* binding */ sqlToGoStruct),\n/* harmony export */   validateFormat: () => (/* binding */ validateFormat)\n/* harmony export */ });\n/* harmony import */ var yaml__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! yaml */ \"(pages-dir-browser)/./node_modules/.pnpm/yaml@2.7.1/node_modules/yaml/browser/index.js\");\n\nfunction inferGoType(value) {\n    let seen = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new Set();\n    if (value === null || value === undefined) {\n        return {\n            type: \"interface{}\",\n            isPointer: true,\n            isArray: false\n        };\n    }\n    if (Array.isArray(value)) {\n        if (value.length === 0) {\n            return {\n                type: \"interface{}\",\n                isPointer: false,\n                isArray: true\n            };\n        }\n        // 分析数组中的所有元素类型\n        const elementTypes = value.map((item)=>inferGoType(item, seen));\n        // 如果所有元素类型相同，使用该类型；否则使用 interface{}\n        const isSameType = elementTypes.every((t)=>t.type === elementTypes[0].type && t.isPointer === elementTypes[0].isPointer);\n        return {\n            type: isSameType ? elementTypes[0].type : \"interface{}\",\n            isPointer: isSameType ? elementTypes[0].isPointer : false,\n            isArray: true,\n            elementType: isSameType ? elementTypes[0] : undefined\n        };\n    }\n    switch(typeof value){\n        case \"string\":\n            return {\n                type: \"string\",\n                isPointer: false,\n                isArray: false\n            };\n        case \"number\":\n            if (Number.isInteger(value)) {\n                if (value > 2147483647 || value < -2147483648) {\n                    return {\n                        type: \"int64\",\n                        isPointer: false,\n                        isArray: false\n                    };\n                }\n                return {\n                    type: \"int\",\n                    isPointer: false,\n                    isArray: false\n                };\n            }\n            return {\n                type: \"float64\",\n                isPointer: false,\n                isArray: false\n            };\n        case \"boolean\":\n            return {\n                type: \"bool\",\n                isPointer: false,\n                isArray: false\n            };\n        case \"object\":\n            if (seen.has(value)) {\n                return {\n                    type: \"interface{}\",\n                    isPointer: true,\n                    isArray: false\n                };\n            }\n            seen.add(value);\n            return {\n                type: \"struct\",\n                isPointer: false,\n                isArray: false\n            };\n        default:\n            return {\n                type: \"interface{}\",\n                isPointer: false,\n                isArray: false\n            };\n    }\n}\nfunction formatGoFieldType(type) {\n    let result = \"\";\n    if (type.isArray) {\n        result += \"[]\";\n    }\n    if (type.isPointer) {\n        result += \"*\";\n    }\n    result += type.type;\n    return result;\n}\nfunction capitalizeFirst(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nfunction jsonToGo(obj, structName) {\n    let seen = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : new Set();\n    if (typeof obj !== \"object\" || obj === null) {\n        return \"\";\n    }\n    if (seen.has(obj)) {\n        return \"\";\n    }\n    seen.add(obj);\n    const nestedStructs = [];\n    let struct = \"type \" + structName + \" struct {\\n\";\n    for (const [key, value] of Object.entries(obj)){\n        const fieldName = capitalizeFirst(key);\n        const goType = inferGoType(value, new Set(seen));\n        if (goType.type === \"struct\") {\n            const nestedStructName = structName + fieldName;\n            if (Array.isArray(value)) {\n                const elementValue = value[0];\n                if (elementValue && typeof elementValue === \"object\") {\n                    nestedStructs.push(jsonToGo(elementValue, nestedStructName, new Set(seen)));\n                    goType.type = nestedStructName;\n                }\n            } else {\n                nestedStructs.push(jsonToGo(value, nestedStructName, new Set(seen)));\n                goType.type = nestedStructName;\n            }\n        }\n        struct += \"\\t\" + fieldName + \" \" + formatGoFieldType(goType) + \" `json:\\\"\" + key + \"\\\"`\\n\";\n    }\n    struct += \"}\\n\\n\";\n    return nestedStructs.join(\"\") + struct;\n}\nfunction formatJSON(input) {\n    try {\n        const parsed = JSON.parse(input);\n        return JSON.stringify(parsed, null, 2);\n    } catch (e) {\n        return input;\n    }\n}\nfunction formatYAML(input) {\n    try {\n        const parsed = yaml__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(input);\n        return yaml__WEBPACK_IMPORTED_MODULE_0__[\"default\"].stringify(parsed, {\n            indent: 2\n        });\n    } catch (e) {\n        return input;\n    }\n}\nconst sqlTypeMap = {\n    \"int\": {\n        mysql: \"int\",\n        postgres: \"int\",\n        sqlite: \"int\"\n    },\n    \"bigint\": {\n        mysql: \"int64\",\n        postgres: \"int64\",\n        sqlite: \"int64\"\n    },\n    \"tinyint\": {\n        mysql: \"int8\",\n        postgres: \"int8\",\n        sqlite: \"int8\"\n    },\n    \"smallint\": {\n        mysql: \"int16\",\n        postgres: \"int16\",\n        sqlite: \"int16\"\n    },\n    \"mediumint\": {\n        mysql: \"int32\",\n        postgres: \"int32\",\n        sqlite: \"int32\"\n    },\n    \"float\": {\n        mysql: \"float32\",\n        postgres: \"float32\",\n        sqlite: \"float32\"\n    },\n    \"double\": {\n        mysql: \"float64\",\n        postgres: \"float64\",\n        sqlite: \"float64\"\n    },\n    \"decimal\": {\n        mysql: \"float64\",\n        postgres: \"decimal.Decimal\",\n        sqlite: \"float64\"\n    },\n    \"varchar\": {\n        mysql: \"string\",\n        postgres: \"string\",\n        sqlite: \"string\"\n    },\n    \"char\": {\n        mysql: \"string\",\n        postgres: \"string\",\n        sqlite: \"string\"\n    },\n    \"text\": {\n        mysql: \"string\",\n        postgres: \"string\",\n        sqlite: \"string\"\n    },\n    \"mediumtext\": {\n        mysql: \"string\",\n        postgres: \"string\",\n        sqlite: \"string\"\n    },\n    \"longtext\": {\n        mysql: \"string\",\n        postgres: \"string\",\n        sqlite: \"string\"\n    },\n    \"datetime\": {\n        mysql: \"time.Time\",\n        postgres: \"time.Time\",\n        sqlite: \"time.Time\"\n    },\n    \"timestamp\": {\n        mysql: \"time.Time\",\n        postgres: \"time.Time\",\n        sqlite: \"time.Time\"\n    },\n    \"date\": {\n        mysql: \"time.Time\",\n        postgres: \"time.Time\",\n        sqlite: \"time.Time\"\n    },\n    \"time\": {\n        mysql: \"time.Time\",\n        postgres: \"time.Time\",\n        sqlite: \"time.Time\"\n    },\n    \"boolean\": {\n        mysql: \"bool\",\n        postgres: \"bool\",\n        sqlite: \"bool\"\n    },\n    \"bool\": {\n        mysql: \"bool\",\n        postgres: \"bool\",\n        sqlite: \"bool\"\n    },\n    \"json\": {\n        mysql: \"interface{}\",\n        postgres: \"interface{}\",\n        sqlite: \"interface{}\"\n    },\n    \"uuid\": {\n        mysql: \"string\",\n        postgres: \"uuid.UUID\",\n        sqlite: \"string\"\n    }\n};\nfunction generateTags(name, sqlType, options) {\n    const tags = [];\n    // 添加 json 标签\n    tags.push('json:\"'.concat(name, '\"'));\n    // 根据选择的标签类型添加对应的标签\n    switch(options.tagType){\n        case \"db\":\n            tags.push('db:\"'.concat(name, '\"'));\n            break;\n        case \"gorm\":\n            const gormTags = [\n                name\n            ];\n            if (sqlType === \"datetime\" || sqlType === \"timestamp\") {\n                gormTags.push(\"autoCreateTime\");\n            }\n            if (name === \"id\") {\n                gormTags.push(\"primaryKey\");\n            }\n            tags.push('gorm:\"'.concat(gormTags.join(';'), '\"'));\n            break;\n        case \"xorm\":\n            const xormTags = [\n                name\n            ];\n            if (sqlType === \"datetime\" || sqlType === \"timestamp\") {\n                xormTags.push(\"created\");\n            }\n            if (name === \"id\") {\n                xormTags.push(\"pk\");\n            }\n            tags.push('xorm:\"'.concat(xormTags.join(' '), '\"'));\n            break;\n    }\n    return tags.join(\" \");\n}\nfunction sqlToGoStruct(sql, options) {\n    const lines = sql.split(/\\r?\\n/);\n    let struct = \"type AutoGen struct {\\n\";\n    let hasTimeImport = false;\n    let hasDecimalImport = false;\n    let hasUUIDImport = false;\n    for (const line of lines){\n        const match = line.trim().match(/^([a-zA-Z0-9_]+)\\s+([a-zA-Z]+)(\\(\\d+\\))?/i);\n        if (match) {\n            var _sqlTypeMap_sqlType;\n            const [, name, type] = match;\n            const sqlType = type.toLowerCase();\n            const goType = ((_sqlTypeMap_sqlType = sqlTypeMap[sqlType]) === null || _sqlTypeMap_sqlType === void 0 ? void 0 : _sqlTypeMap_sqlType[options.dbType]) || \"interface{}\";\n            if (goType === \"time.Time\") {\n                hasTimeImport = true;\n            } else if (goType === \"decimal.Decimal\") {\n                hasDecimalImport = true;\n            } else if (goType === \"uuid.UUID\") {\n                hasUUIDImport = true;\n            }\n            const fieldName = capitalizeFirst(name);\n            const fieldType = options.usePointer && goType !== \"interface{}\" ? \"*\" + goType : goType;\n            const tags = generateTags(name, sqlType, options);\n            struct += \"\\t\" + fieldName + \" \" + fieldType + \" `\" + tags + \"`\\n\";\n        }\n    }\n    struct += \"}\\n\";\n    // 添加必要的导入\n    const imports = [];\n    if (hasTimeImport) {\n        imports.push('time');\n    }\n    if (hasDecimalImport) {\n        imports.push('github.com/shopspring/decimal');\n    }\n    if (hasUUIDImport) {\n        imports.push('github.com/google/uuid');\n    }\n    if (imports.length > 0) {\n        struct = 'import (\\n\\t\"' + imports.join('\"\\n\\t\"') + '\"\\n)\\n\\n' + struct;\n    }\n    return struct;\n}\nconst SQL_TEMPLATE = \"-- 用户表示例\\nid bigint\\nusername varchar(255)\\nemail varchar(255)\\npassword varchar(255)\\nage int\\ncreated_at datetime\\nupdated_at timestamp\\nis_active boolean\\nprofile_data json\\n\";\n// 添加格式校验函数\nfunction validateFormat(input, type) {\n    if (!input.trim()) {\n        return {\n            isValid: false,\n            error: \"输入内容为空\"\n        };\n    }\n    try {\n        switch(type){\n            case 'json':\n                JSON.parse(input);\n                return {\n                    isValid: true\n                };\n            case 'yaml':\n                yaml__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(input);\n                return {\n                    isValid: true\n                };\n            case 'sql':\n                const sqlLines = input.split(/\\r?\\n/).filter((line)=>line.trim() && !line.startsWith('--'));\n                if (sqlLines.length === 0) {\n                    return {\n                        isValid: false,\n                        error: \"没有找到有效的 SQL 字段定义\"\n                    };\n                }\n                for (const line of sqlLines){\n                    const match = line.trim().match(/^[a-zA-Z0-9_]+\\s+[a-zA-Z]+(\\(\\d+\\))?$/i);\n                    if (!match) {\n                        return {\n                            isValid: false,\n                            error: \"无效的 SQL 字段定义: \".concat(line)\n                        };\n                    }\n                }\n                return {\n                    isValid: true\n                };\n            case 'proto':\n                if (!input.includes('message')) {\n                    return {\n                        isValid: false,\n                        error: \"未找到 message 定义\"\n                    };\n                }\n                return {\n                    isValid: true\n                };\n            case 'xml':\n                new DOMParser().parseFromString(input, 'text/xml');\n                return {\n                    isValid: true\n                };\n            case 'csv':\n                const csvLines = input.split(/\\r?\\n/).filter((line)=>line.trim());\n                if (csvLines.length < 2) {\n                    return {\n                        isValid: false,\n                        error: \"CSV 至少需要包含标题行和一行数据\"\n                    };\n                }\n                return {\n                    isValid: true\n                };\n            default:\n                return {\n                    isValid: false,\n                    error: \"不支持的格式类型\"\n                };\n        }\n    } catch (e) {\n        return {\n            isValid: false,\n            error: \"格式错误: \".concat(e instanceof Error ? e.message : '未知错误')\n        };\n    }\n}\n// 添加示例模板\nconst TEMPLATES = {\n    json: '{\\n  \"id\": 1,\\n  \"name\": \"example\",\\n  \"age\": 25,\\n  \"email\": \"test@example.com\",\\n  \"is_active\": true,\\n  \"created_at\": \"2024-03-21T12:00:00Z\",\\n  \"tags\": [\"tag1\", \"tag2\"],\\n  \"profile\": {\\n    \"address\": \"123 Street\",\\n    \"phone\": \"1234567890\"\\n  }\\n}',\n    yaml: 'id: 1\\nname: example\\nage: 25\\nemail: test@example.com\\nis_active: true\\ncreated_at: 2024-03-21T12:00:00Z\\ntags:\\n  - tag1\\n  - tag2\\nprofile:\\n  address: 123 Street\\n  phone: \"1234567890\"',\n    sql: SQL_TEMPLATE,\n    proto: 'syntax = \"proto3\";\\n\\npackage example;\\n\\nmessage User {\\n  int64 id = 1;\\n  string name = 2;\\n  int32 age = 3;\\n  string email = 4;\\n  bool is_active = 5;\\n  string created_at = 6;\\n  repeated string tags = 7;\\n  Profile profile = 8;\\n}\\n\\nmessage Profile {\\n  string address = 1;\\n  string phone = 2;\\n}',\n    xml: '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<user>\\n  <id>1</id>\\n  <name>example</name>\\n  <age>25</age>\\n  <email>test@example.com</email>\\n  <is_active>true</is_active>\\n  <created_at>2024-03-21T12:00:00Z</created_at>\\n  <tags>\\n    <tag>tag1</tag>\\n    <tag>tag2</tag>\\n  </tags>\\n  <profile>\\n    <address>123 Street</address>\\n    <phone>1234567890</phone>\\n  </profile>\\n</user>',\n    csv: \"id,name,age,email,is_active,created_at\\n1,example,25,test@example.com,true,2024-03-21T12:00:00Z\"\n};\n// Proto 转 Go 结构体\nfunction protoToGo(proto) {\n    const lines = proto.split(/\\r?\\n/);\n    let output = \"\";\n    let currentMessage = \"\";\n    let imports = new Set();\n    for (const line of lines){\n        // 忽略空行和 proto 语法声明\n        if (!line.trim() || line.includes('syntax') || line.includes('package')) {\n            continue;\n        }\n        // 处理消息定义\n        if (line.includes('message')) {\n            var _line_match;\n            if (currentMessage) {\n                output += \"}\\n\\n\";\n            }\n            const messageName = (_line_match = line.match(/message\\s+(\\w+)/)) === null || _line_match === void 0 ? void 0 : _line_match[1];\n            if (messageName) {\n                currentMessage = messageName;\n                output += \"type \".concat(messageName, \" struct {\\n\");\n            }\n            continue;\n        }\n        // 处理字段\n        if (currentMessage && line.trim()) {\n            const fieldMatch = line.match(/\\s*(repeated)?\\s*(\\w+)\\s+(\\w+)\\s*=\\s*\\d+;/);\n            if (fieldMatch) {\n                const [, repeated, type, name] = fieldMatch;\n                const goType = protoTypeToGo(type);\n                const fieldName = capitalizeFirst(name);\n                const fieldType = repeated ? \"[]\".concat(goType) : goType;\n                if (goType === \"time.Time\") {\n                    imports.add('time');\n                }\n                output += \"\t\".concat(fieldName, \" \").concat(fieldType, ' `json:\"').concat(name, '\"`\\n');\n            }\n        }\n    }\n    if (currentMessage) {\n        output += \"}\\n\";\n    }\n    if (imports.size > 0) {\n        output = 'import (\\n\\t\"' + Array.from(imports).join('\"\\n\\t\"') + '\"\\n)\\n\\n' + output;\n    }\n    return output;\n}\n// Proto 类型转 Go 类型\nfunction protoTypeToGo(type) {\n    const typeMap = {\n        'double': 'float64',\n        'float': 'float32',\n        'int32': 'int32',\n        'int64': 'int64',\n        'uint32': 'uint32',\n        'uint64': 'uint64',\n        'sint32': 'int32',\n        'sint64': 'int64',\n        'fixed32': 'uint32',\n        'fixed64': 'uint64',\n        'sfixed32': 'int32',\n        'sfixed64': 'int64',\n        'bool': 'bool',\n        'string': 'string',\n        'bytes': '[]byte',\n        'Timestamp': 'time.Time'\n    };\n    return typeMap[type] || type;\n}\n// XML 转 Go 结构体\nfunction xmlToGo(xml) {\n    try {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(xml, 'text/xml');\n        const root = doc.documentElement;\n        return processXMLNode(root, capitalizeFirst(root.tagName));\n    } catch (e) {\n        throw new Error('XML 解析错误');\n    }\n}\nfunction processXMLNode(node, structName) {\n    let seen = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : new Set();\n    if (seen.has(structName)) {\n        return '';\n    }\n    seen.add(structName);\n    let struct = \"type \".concat(structName, \" struct {\\n\");\n    const nestedStructs = [];\n    const fields = new Map();\n    // 处理子元素\n    for (const child of Array.from(node.children)){\n        const fieldName = capitalizeFirst(child.tagName);\n        const existingField = fields.get(fieldName);\n        if (child.children.length === 0 || child.children.length === 1 && child.children[0].nodeType === 3) {\n            var _child_textContent;\n            // 简单值\n            const value = ((_child_textContent = child.textContent) === null || _child_textContent === void 0 ? void 0 : _child_textContent.trim()) || '';\n            const type = inferTypeFromValue(value);\n            if (existingField) {\n                existingField.isArray = true;\n            } else {\n                fields.set(fieldName, {\n                    type,\n                    isArray: false\n                });\n            }\n        } else {\n            // 复杂类型\n            const nestedStructName = structName + fieldName;\n            nestedStructs.push(processXMLNode(child, nestedStructName, seen));\n            if (existingField) {\n                existingField.isArray = true;\n            } else {\n                fields.set(fieldName, {\n                    type: nestedStructName,\n                    isArray: false\n                });\n            }\n        }\n    }\n    // 生成字段\n    for (const [fieldName, { type, isArray }] of fields){\n        const fieldType = isArray ? \"[]\".concat(type) : type;\n        struct += \"\t\".concat(fieldName, \" \").concat(fieldType, ' `xml:\"').concat(fieldName.toLowerCase(), '\" json:\"').concat(fieldName.toLowerCase(), '\"`\\n');\n    }\n    struct += \"}\\n\\n\";\n    return nestedStructs.join('') + struct;\n}\nfunction inferTypeFromValue(value) {\n    if (value === 'true' || value === 'false') return 'bool';\n    if (/^\\d+$/.test(value)) return 'int';\n    if (/^\\d*\\.\\d+$/.test(value)) return 'float64';\n    if (/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/.test(value)) return 'time.Time';\n    return 'string';\n}\n// CSV 转 Go 结构体\nfunction csvToGo(csv) {\n    const lines = csv.split(/\\r?\\n/).filter((line)=>line.trim());\n    if (lines.length < 2) {\n        throw new Error('CSV 至少需要包含标题行和一行数据');\n    }\n    const headers = lines[0].split(',').map((h)=>h.trim());\n    const firstRow = lines[1].split(',').map((v)=>v.trim());\n    let struct = \"type AutoGen struct {\\n\";\n    for(let i = 0; i < headers.length; i++){\n        const fieldName = capitalizeFirst(headers[i]);\n        const value = firstRow[i];\n        const type = inferTypeFromValue(value);\n        struct += \"\t\".concat(fieldName, \" \").concat(type, ' `json:\"').concat(headers[i], '\"`\\n');\n    }\n    struct += \"}\\n\";\n    return struct;\n}\n// 导出新的转换函数\nfunction convertToGo(input, type, options) {\n    switch(type){\n        case 'json':\n            return jsonToGo(JSON.parse(input), 'AutoGen');\n        case 'yaml':\n            return jsonToGo(yaml__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(input), 'AutoGen');\n        case 'sql':\n            return sqlToGoStruct(input, options);\n        case 'proto':\n            return protoToGo(input);\n        case 'xml':\n            return xmlToGo(input);\n        case 'csv':\n            return csvToGo(input);\n        default:\n            throw new Error('不支持的格式类型');\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./pages/utils.ts\n"));

/***/ })

});